# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                       controllers.Application.index()

########################################################################################################################
#
#                                               ###    ########  ####
#                                              ## ##   ##     ##  ##
#                                             ##   ##  ##     ##  ##
#                                            ##     ## ########   ##
#                                            ######### ##         ##
#                                            ##     ## ##         ##
#                                            ##     ## ##        ####
#
########################################################################################################################

######################################################### CONDUCTORES #######################################
#Obtener todos los conductores
GET        /conductor                 controllers.DriverController.read()
#Crear nuevo conductor
POST       /conductor                 controllers.DriverController.create()


#######################################################################  USUARIOS ################
#Obtener todos los usuarios
GET        /usuarios                 controllers.UserController.read()
#Obtener los datos de un usuario
GET        /usuarios/:id            controllers.UserController.read(id: String)
#Registrar un nuevo usuario
POST       /usuarios                 controllers.UserController.create()
#Modificar datos de un usuario
PUT	/usuarios/:id                   controllers.UserController.modify(id: String)
#Obtener reservas de un usuario
GET        /usuarios/:id/reservas
#Crear una reserva
POST        /usuarios/:id/reservas
#Modificar una reserva
PUT        /usuarios/:id/reservas/:id2
#Eliminar una reserva
DELETE        /usuarios/:id/reservas/:id2


################################################################   MOBIBUSES  ############################################
#Obtener todos los mobibuses del sistema
GET        /mobibuses
#Obtener los datos de un mobibus
GET        /mobibuses/:id
#Registrar un nuevo mobibus
POST        /mobibuses
#Modificar datos de un mobibus
PUT        /mobibuses/:id
#Enviar los datos del mobibus (GPS, hora�)
POST        /mobibuses/:id/datos
#Obtener los datos registrados del mobibus (a trav�s del path param se podr�a indicar si traer s�lo el �ltimo dato, los n �ltimos datos, o la hora espec�fica de la que se quieren conocer los datos)  ** pueden ser mas rutas**


#Registrar una revisi�n tecnomec�nica
POST        /mobibuses/:id/revisiones
#Obtener las revisiones tecnomec�nicas del veh�culo
GET        /mobibuses/:id/revisiones
#Registrar el inicio de un trayecto o ruta (con la hora, informaci�n del conductor y Ruta esperada)
POST        /mobibuses/:id/trayectos
#Modificar el registro para poner la hora final del trayecto
PUT        /mobibuses/:id/trayectos/:id2
#Obtener los trayectos de un tranv�a (Para obtener tiempos de conductores y percances
GET        /mobibuses/:id/trayectos/


#####################################################################  TRANVIAS  #######################
#Obtener todos los tranvias del sistema
GET        /tranvias                    controllers.TranviaController.read()
#Obtener los datos de un tranvia
GET        /tranvias/:id               controllers.TranviaController.read(id: String)
#Registrar un nuevo tranvias
POST        /tranvias                   controllers.TranviaController.create()
#Modificar datos de un tranvias
PUT        /tranvias/:id               controllers.TranviaController.modify(id: String)
#Enviar los datos del tranvias (GPS, hora�)
POST        /tranvias/:id/datos
#Obtener los datos registrados del tranvias (a trav�s del path param se podr�a indicar si traer s�lo el �ltimo dato, los n �ltimos datos, o la hora espec�fica de la que se quieren conocer los datos)     ** pueden ser mas rutas**

#Registrar una revisi�n tecnomec�nica
POST        /tranvias/:id/revisiones
#Obtener las revisiones tecnomec�nicas del veh�culo
GET        /tranvias/:id/revisiones
#Registrar el inicio de un trayecto o ruta (con la hora, informaci�n del conductor y Ruta esperada)
POST        /tranvias/:id/trayectos
#Modificar el registro para poner la hora final del trayecto
PUT        /tranvias/:id/trayectos/:id2
#Obtener los trayectos de un tranv�a (Para obtener tiempos de conductores y percances
GET        /tranvias/:id/trayectos/



#########################################################  VCUBS #######################################
#Obtener todos los vcubs del sistema
GET        /vcubs                   controllers.VcubController.read()
#Obtener los datos de un vcubs
GET        /vcubs/:id               controllers.VcubController.read(id: String)
#Registrar un nuevo vcubs
POST        /vcubs                  controllers.VcubController.create()
#Modificar datos de un vcubs
PUT        /vcubs/:id               controllers.VcubController.modify(id: String)
#Enviar los datos del vcubs (GPS, hora�)
GET        /vcubs
#Obtener los datos registrados del vcubs (a trav�s del path param se podr�a indicar si traer s�lo el �ltimo dato, los n �ltimos datos, o la hora espec�fica de la que se quieren conocer los datos)

#Registrar una revisi�n tecnomec�nica
POST        /vcubs/:id/revisiones
#Obtener las revisiones tecnomec�nicas del veh�culo
GET        /vcubs/:id/revisiones
#Registrar el inicio de un trayecto o ruta (con la hora, informaci�n del conductor y Ruta esperada)
POST        /vcubs/:id/trayectos
#Modificar el registro para poner la hora final del trayecto
PUT        /vcubs/:id/trayectos/:id2
#Obtener los trayectos de un tranv�a (Para obtener tiempos de conductores y percances
GET        /vcubs/:id/trayectos/



#TRAYECTOS
GET        /trayectos
POST        /trayectos


################################################################### ESTACIONES #############################################################
#Obtener todas las estaciones del sistema
GET     /estaciones             controllers.EstacionController.read()
#Obtener los datos de una estaci�n
GET     /estaciones/:id         controllers.EstacionController.read(id: String)
#Registrar una nueva estaci�n
POST     /estaciones
#Modificar datos de una estaci�n
PUT     /estaciones/:id
#Obtener las bicicletas que se encuentran en una estaci�n
GET     /estaciones/:id/bicicletas
#Prestar una bicicleta en una estaci�n
DELETE     /estaciones/:id/bicicletas/:id2
#Entregar una bicicleta en una estaci�n
POST     /estaciones/:id/bicicletas





# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file           controllers.Assets.versioned(path="/public", file: Asset)
